---------------------------------------
Автор: Александр Дыдычкин             |
email: AlexanderDydychckin@yandex.ru  |
Дата последней правки: 18.10.16       |
---------------------------------------

Документация по проекту:

Данный код был написан как основа ("мини-библиотечка") для создания поверх этого чего-то нового.
При проблемах в написании производных работ, можно включить дополнительное логирование и вывод информации для дебага. Для этого в классах смотрите переменные LOGS и DEBUG, присвойте им значение true. Весь код тестировался и разрабатывался на следующих версиях ПО:
-OS: (Linux) Ubuntu 16.04 
-web-server: lampp (version: xampp 5.6.14-0),
-ftp-library: commons-net-3.4
-jade-4.3.3
-OWL API 4.2.3.20160319-0906 (рекомендуется добавлять OWL API в свой проект с помощью Maven (у OWL API большое количество зависимостей))

--------------------------------------------------

Текущее файловое состояние проекта (на 28.05.2018):
src
├── agent
│   ├── Axiom.java
│   ├── CognitiveAgent.java
│   ├── Commiter.java
│   ├── Config.java
│   ├── InformFactFalse.java
│   ├── InformFactTrue.java
│   ├── KbRequest.java
│   ├── QueryIf.java
│   ├── REASONER.java
│   ├── Test.java
│   └── VarHolder.java
└── myagent
    ├── MyCognitiveAgent.java
    ├── PlatformStart.java
    ├── SenderAgent.java
    └── TestAxiom.java

				
PlatformStart.java - реализует запуск jade платформы и агентов
MyCognitiveAgent.java - использует (тестирует) весь функционал реализованный в KbRequest.java
SenderAgent.java - отправляет триплет агенту описанному в MyCognitiveAgent (имя Unknown)
KbRequest.java - основной "decision maker" во время получения входящих сообщений

Что нужно сделать перед тем как начать пользоваться этим кодом?
>Разверните веб и фтп сервера (комментарии см. ниже).

Как начать пользоваться текущими наработками?
>Сначала разверните jade-платформу, затем создайте собственный класс наследник от класса CognitiveAgent.java, обязательно отредактируйте все переменные и методы отмеченные <//EDIT_IT!>, после этого все должно заработать.
Теперь Вы можете создавать свою собственную логику!

Тезисно: Все методы, которые можно использовать находятся в классе KbRequest с модификатором public(!), также весь реализованный функционал протестирован в классе MyCognitiveAgent.

--------------------------------------------------

Зависимости (библиотеки):
	-jade
	-OWL API (рекомендуется добавлять OWL API в свой проект с помощью Maven (у OWL API большое количество зависимостей))
	-common-net (для доступа к онтологии по протоколу ftp (только так можно редактировать файл онтологии на сервере))

Дополнительные зависимости (не обязательно, но рекомендуется):
	Из библиотеки Jena:
		-log4j-1.2.17.jar
		-slf4j-api-1.7.12.jar
		-slf4j-log4j12-1.7.12.jar
		
--------------------------------------------------

Web server & ftp server:
Развернуть вебсервер на Linux хосте можно с помощью lampp (xampp).

Настройка и подключение к ftp серверу (хост машина - Ubuntu Linux, ftp сервер - ProFTPd):

В полях:
protected String ftpURL = ""; //(1)
protected String ftpLogin = ""; //(2)
protected String ftpPassword = ""; //(3)

нужно указать адрес ftp сервера(1), логин(2) и пароль(3) к ftp серверу. На Linux хосте в полях (2) и (3) можно использовать логин/пароль Вашего "дефолтного" пользователя (~HOME), либо использовать логин/пароль демона (см. конфигурационный файл /opt/lampp/etc/proftpd.conf), либо создайте специального пользователя для ftp сервера (что является наиболее предпочтительным вариантом).

На Linux хосте в случае редактирования файлов "руками" в папке /opt/lampp/htdocs не забывайте, что по-умолчанию эта папка с правами root. Также нужно не забыть дать соответствующие права файлам-онтологиям (chmod 777 myOntology.owl) + лучше сделать chmod 777 на папку htdocs (иначе merge не будет адекватно работать.)

--------------------------------------------------

Поддержка конфигурационных файлов

Переменные:
- ftpLogin
- serviceName
- ftpNameOfOntFile
- ftpURL
- ftpPassword
- internalOnt

Могут быть заданы с помощью конфигурационных файлов, которые находятся:
`config/<name_of_my_agent.conf>`
Рабочий пример конфигурационных файлов находится в репозитории.

